generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//model
model Users {
  id       String @id @default(uuid()) @db.Uuid
  name     String @db.VarChar(255)
  email    String @unique @db.VarChar(255)
  username String @unique @db.VarChar(255)
  password String @db.Text

  deleted   Boolean   @default(false) @db.Boolean
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp()
  deletedAt DateTime? @map("deleted_at") @db.Timestamp()

  //relations 1-N
  tweets Tweet[]
  likes  Like[]

  followedBy Follower[] @relation("followedBy")
  following  Follower[] @relation("following")

  @@map("users")
}

model Tweet {
  id      String    @id @default(uuid()) @db.Uuid
  content String    @db.VarChar(255)
  type    TypeTweet @default(TWEET)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  //relation user
  userId String @map("user_id") @db.Uuid
  user   Users  @relation(fields: [userId], references: [id])

  //relations 1-N
  likes Like[]

  replies Reply[] @relation("TweetOne")

  tweet Reply? @relation("ReplyToTweet")

  @@map("tweets")
}

model Reply {
  id           String @id @default(uuid()) @db.Uuid
  idTweetOne   String @map("id_tweet_one") @db.Uuid
  idTweetReply String @unique @map("id_tweet_reply") @db.Uuid

  tweetOne   Tweet @relation(name: "TweetOne", fields: [idTweetOne], references: [id])
  tweetReply Tweet @relation(name: "ReplyToTweet", fields: [idTweetReply], references: [id])

  @@map("replies")
}

model Like {
  id String @id @default(uuid()) @db.Uuid

  //relations
  userId String @map("user_id") @db.Uuid
  user   Users  @relation(fields: [userId], references: [id])

  tweetId String @map("tweet_id") @db.Uuid
  tweet   Tweet  @relation(fields: [tweetId], references: [id])

  @@unique([tweetId, userId])
}

model Follower {
  id         String @id @default(uuid()) @db.Uuid
  idUser     String @map("id_user") @db.Uuid
  idFollower String @map("id_follower") @db.Uuid

  user     Users @relation(name: "following", fields: [idUser], references: [id])
  follower Users @relation(name: "followedBy", fields: [idFollower], references: [id])

  @@map("followers")
}

enum TypeTweet {
  TWEET
  REPLY
}
